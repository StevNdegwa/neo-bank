type Query {
  """Registered account"""
  account(account: AccountLoginInput): Account

  """Login to account"""
  login(account: AccountLoginInput): Account

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
}

"""A registered account"""
type Account implements Node {
  """The ID of an object"""
  id: ID!
  accountRef: String!
  firstName: String
  lastName: String
  email: String
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Data required to successfully login to application"""
input AccountLoginInput {
  accountRef: String!
  password: String
}

type Mutation {
  registerAccount(input: registerAccountInput!): registerAccountPayload
}

type registerAccountPayload {
  registerAccount: Account
  clientMutationId: String
}

input registerAccountInput {
  account: RegisterAccountInput!
  clientMutationId: String
}

"""Data required to register a new account"""
input RegisterAccountInput {
  firstName: String!
  lastName: String!
  email: String!
}
